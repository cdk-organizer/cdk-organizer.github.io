{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CDK Organizer CDK Organizer is a library motivated by the need to structure CDK projects in a way that is easy to maintain the stacks and the configuration per environment. By default the CDK project structure is very simple and works well for small projects, but as the project grows it becomes harder to maintain without having multiple CDK start points. With CDK Organizer the project structure is based on the environment, region and stack groups, each environment/region can have multiple groups, each group can have multiple stacks. The stacks groups are also driven by configuration (YAML format), so you can have different configurations per environment/region for the same stack group. More details about the project folder structure can be found here: Python Typescript Architecture Getting Started Python Typescript AWS CDK Typescript CDK for Terraform Examples Python AWS CDK Python CDK for Terraform Typescript AWS CDK Typescript CDK for Terraform","title":"CDK Organizer"},{"location":"#cdk-organizer","text":"CDK Organizer is a library motivated by the need to structure CDK projects in a way that is easy to maintain the stacks and the configuration per environment. By default the CDK project structure is very simple and works well for small projects, but as the project grows it becomes harder to maintain without having multiple CDK start points. With CDK Organizer the project structure is based on the environment, region and stack groups, each environment/region can have multiple groups, each group can have multiple stacks. The stacks groups are also driven by configuration (YAML format), so you can have different configurations per environment/region for the same stack group. More details about the project folder structure can be found here: Python Typescript","title":"CDK Organizer"},{"location":"#architecture","text":"","title":"Architecture"},{"location":"#getting-started","text":"Python Typescript AWS CDK Typescript CDK for Terraform","title":"Getting Started"},{"location":"#examples","text":"Python AWS CDK Python CDK for Terraform Typescript AWS CDK Typescript CDK for Terraform","title":"Examples"},{"location":"contributing/","text":"Contributing This repository is a monorepo for AWS CDK Project Framework projects. Requirements Install the following softwares node.js 16.x poetry pip install poetry == 1 .2.0 Installation using pipx is strongly recommended. Install dependencies npm install poetry install Terminal virtual environment poetry shell Run Flake8 Linting npx nx affected:lint or for a specific project npx nx lint <appName> Add new dependency npx nx run <appName>:add --name <dependencyName> == <dependencyVersion> Example: npx nx run core:add --name requests = 2 .27.1 Using the Nx wrapper to adding a dependency ensure that both root poetry.lock and project poetry.lock are updated.","title":"Contributing"},{"location":"contributing/#contributing","text":"This repository is a monorepo for AWS CDK Project Framework projects.","title":"Contributing"},{"location":"contributing/#requirements","text":"Install the following softwares node.js 16.x poetry pip install poetry == 1 .2.0 Installation using pipx is strongly recommended.","title":"Requirements"},{"location":"contributing/#install-dependencies","text":"npm install poetry install","title":"Install dependencies"},{"location":"contributing/#terminal-virtual-environment","text":"poetry shell","title":"Terminal virtual environment"},{"location":"contributing/#run-flake8-linting","text":"npx nx affected:lint or for a specific project npx nx lint <appName>","title":"Run Flake8 Linting"},{"location":"contributing/#add-new-dependency","text":"npx nx run <appName>:add --name <dependencyName> == <dependencyVersion> Example: npx nx run core:add --name requests = 2 .27.1 Using the Nx wrapper to adding a dependency ensure that both root poetry.lock and project poetry.lock are updated.","title":"Add new dependency"},{"location":"summary/","text":"CDK Organizer Python Typescript AWS CDK Typescript CDK for Terraform Contributing","title":"Summary"},{"location":"reference/examples/python/aws-cdk/","text":"CDK Organizer Python AWS CDK Example This example shows how to use the CDK Organizer with AWS CDK to create a simple S3 bucket and reference it in a IAM role. Usage All the commands to synthesize and deploy the stacks are the same as documented in the AWS CDK documentation, because the goal of this library is to provide a common structure and tools to organize CDK projects not changing the way to deploy them.","title":"CDK Organizer Python AWS CDK Example"},{"location":"reference/examples/python/aws-cdk/#cdk-organizer-python-aws-cdk-example","text":"This example shows how to use the CDK Organizer with AWS CDK to create a simple S3 bucket and reference it in a IAM role.","title":"CDK Organizer Python AWS CDK Example"},{"location":"reference/examples/python/aws-cdk/#usage","text":"All the commands to synthesize and deploy the stacks are the same as documented in the AWS CDK documentation, because the goal of this library is to provide a common structure and tools to organize CDK projects not changing the way to deploy them.","title":"Usage"},{"location":"reference/examples/python/aws-cdk/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased","title":"Changelog"},{"location":"reference/examples/python/aws-cdk/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"reference/examples/python/aws-cdk/CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"reference/examples/python/cdktf/","text":"CDK Organizer Python CDK for Terraform Example This example shows how to use the CDK Organizer with CDK for Terraform to create a simple S3 bucket and reference it in a IAM role. Usage All the commands to synthesize and deploy the stacks are the same as documented in the CDK for Terraform documentation, because the goal of this library is to provide a common structure and tools to organize CDK projects not changing the way to deploy them.","title":"CDK Organizer Python CDK for Terraform Example"},{"location":"reference/examples/python/cdktf/#cdk-organizer-python-cdk-for-terraform-example","text":"This example shows how to use the CDK Organizer with CDK for Terraform to create a simple S3 bucket and reference it in a IAM role.","title":"CDK Organizer Python CDK for Terraform Example"},{"location":"reference/examples/python/cdktf/#usage","text":"All the commands to synthesize and deploy the stacks are the same as documented in the CDK for Terraform documentation, because the goal of this library is to provide a common structure and tools to organize CDK projects not changing the way to deploy them.","title":"Usage"},{"location":"reference/examples/python/cdktf/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased","title":"Changelog"},{"location":"reference/examples/python/cdktf/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"reference/examples/python/cdktf/CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"reference/examples/typescript/aws-cdk/","text":"CDK Organizer Typescript AWS CDK Example This example shows how to use the CDK Organizer with AWS CDK to create a simple S3 bucket and reference it in a IAM role. Usage All the commands to synthesize and deploy the stacks are the same as documented in the AWS CDK documentation, because the goal of this library is to provide a common structure and tools to organize CDK projects not changing the way to deploy them.","title":"CDK Organizer Typescript AWS CDK Example"},{"location":"reference/examples/typescript/aws-cdk/#cdk-organizer-typescript-aws-cdk-example","text":"This example shows how to use the CDK Organizer with AWS CDK to create a simple S3 bucket and reference it in a IAM role.","title":"CDK Organizer Typescript AWS CDK Example"},{"location":"reference/examples/typescript/aws-cdk/#usage","text":"All the commands to synthesize and deploy the stacks are the same as documented in the AWS CDK documentation, because the goal of this library is to provide a common structure and tools to organize CDK projects not changing the way to deploy them.","title":"Usage"},{"location":"reference/packages/python/","text":"CDK Organizer Python Library This library contains the core features to handle CDK projects including: Logging Configuration Resolver Stack Groups Loader Naming Utils Installation pip install cdk-organizer Project Structure To apply the pattern purposed in this library for CDK projects, the following structure is required: . +-- cdk.json +-- app.py Stack Structure the stack class needs to inherit from class cdk_organizer.aws.stack.Stack for AWS CDK and cdk_organizer.terraform.stack.Stack for Terraform CDK. AWS CDK from constructs import Construct from cdk_organizer.aws.stack import Stack from cdk_organizer.aws.stack_group import StackGroup class MyStack ( Stack ): def __init__ ( self , scope : Construct , id : str , stack_group : StackGroup , ** kwargs ) -> None : super () . __init__ ( scope , id , stack_group , ** kwargs ) Terraform CDK from constructs import Construct from cdk_organizer.terraform.stack import Stack from cdk_organizer.terraform.stack_group import StackGroup class MyStack ( Stack ): def __init__ ( self , scope : Construct , id : str , stack_group : StackGroup , ** kwargs ) -> None : super () . __init__ ( scope , id , stack_group , ** kwargs ) Using S3 Backend To use S3 terraform backend, the following resources are required: S3 Bucket DynamoDB Table Modify the cdktf.json to add the following object: { ... \"context\" : { ... \"s3Backend\" : { \"bucket\" : \"<bucket-name>\" , \"region\" : \"<aws-region>\" , \"dynamodb_table\" : \"<dynamodb-table-name>\" } ... } ... } Stack Group Structure Create a stacks folder in the root of the project and structure it as follows: . +-- cdk.json +-- app.py +-- stacks/ | +-- <groupName>/ | +-- stacks.py The stack groups files follow this pattern: AWS CDK import aws_cdk as cdk from dataclasses import dataclass from cdk_organizer.aws.stack_group import StackGroup @dataclass class MyStackGroupConfig : domain : str ipv6 : bool = True class MyStackGroup ( StackGroup [ MyStackGroupConfig ]): def _load_stacks ( self ) -> None : MyStack ( self . app , self . get_stack_name ( 'my-stack' ), stack_group = self , parameters = MyStackParameters ( domain = self . data . domain , ipv6 = self . data . ipv6 ) ) Terraform import cdktf from dataclasses import dataclass from cdk_organizer.terraform.stack_group import StackGroup @dataclass class MyStackGroupConfig : domain : str ipv6 : bool = True class MyStackGroup ( StackGroup [ MyStackGroupConfig ]): def _load_stacks ( self ) -> None : MyStack ( self . app , self . get_stack_name ( 'my-stack' ), stack_group = self , parameters = MyStackParameters ( domain = self . data . domain , ipv6 = self . data . ipv6 ) ) Using Stack Attributes from Other Stack Groups In some cases, you may want to use the attributes of another stack group. For example, refer the DNS Hosted Zone created by a shared stack group. To resolve the group use the self.resolve_group function in the stack group class, like the example below: import aws_cdk as cdk from dataclasses import dataclass from cdk_organizer.aws.stack_group import StackGroup from stacks.dns import DNSStackGroup @dataclass class MyStackGroupConfig : domain : str ipv6 : bool = True class MyStackGroup ( StackGroup [ MyStackGroupConfig ]): def _load_stacks ( self ) -> None : MyStack ( self . app , self . get_stack_name ( 'my-stack' ), stack_group = self , parameters = MyStackParameters ( domain = self . data . domain , zone = self . resolve_group ( DNSStackGroup ) . zone ipv6 = self . data . ipv6 ) ) The function get_stack_name generates the stack name based on following pattern. Pattern : {module_path}-{name}-{region}-{env} Consider the following example: module_path : myproject.myapp.www name : spa region : us-east-1 env : dev Stack name will be: myproject-myapp-www-spa-us-east-1-dev . Config Structure Create a config folder in the root of the project and structure it as follows: . +-- cdk.json +-- app.py +-- config/ | +-- <env>/ | +-- config.yaml | +-- <region>/ | +-- config.yaml | +-- <groupName>/ | +-- config.yaml The first two levels are reserved to the environment name and the region name, the next levels needs to match the stack group structure. Example: . +-- cdk.json +-- app.py +-- config/ | +-- config.yaml | +-- dev/ | +-- config.yaml | +-- us-east-1/ | +-- config.yaml | +-- app1/ | +-- config.yaml +-- stacks/ | +-- app1/ | +-- stacks.py +-- templates/ | +-- stacks/ Examples AWS CDK CDK for Terraform","title":"Python"},{"location":"reference/packages/python/#cdk-organizer-python-library","text":"This library contains the core features to handle CDK projects including: Logging Configuration Resolver Stack Groups Loader Naming Utils","title":"CDK Organizer Python Library"},{"location":"reference/packages/python/#installation","text":"pip install cdk-organizer","title":"Installation"},{"location":"reference/packages/python/#project-structure","text":"To apply the pattern purposed in this library for CDK projects, the following structure is required: . +-- cdk.json +-- app.py","title":"Project Structure"},{"location":"reference/packages/python/#stack-structure","text":"the stack class needs to inherit from class cdk_organizer.aws.stack.Stack for AWS CDK and cdk_organizer.terraform.stack.Stack for Terraform CDK.","title":"Stack Structure"},{"location":"reference/packages/python/#aws-cdk","text":"from constructs import Construct from cdk_organizer.aws.stack import Stack from cdk_organizer.aws.stack_group import StackGroup class MyStack ( Stack ): def __init__ ( self , scope : Construct , id : str , stack_group : StackGroup , ** kwargs ) -> None : super () . __init__ ( scope , id , stack_group , ** kwargs )","title":"AWS CDK"},{"location":"reference/packages/python/#terraform-cdk","text":"from constructs import Construct from cdk_organizer.terraform.stack import Stack from cdk_organizer.terraform.stack_group import StackGroup class MyStack ( Stack ): def __init__ ( self , scope : Construct , id : str , stack_group : StackGroup , ** kwargs ) -> None : super () . __init__ ( scope , id , stack_group , ** kwargs )","title":"Terraform CDK"},{"location":"reference/packages/python/#using-s3-backend","text":"To use S3 terraform backend, the following resources are required: S3 Bucket DynamoDB Table Modify the cdktf.json to add the following object: { ... \"context\" : { ... \"s3Backend\" : { \"bucket\" : \"<bucket-name>\" , \"region\" : \"<aws-region>\" , \"dynamodb_table\" : \"<dynamodb-table-name>\" } ... } ... }","title":"Using S3 Backend"},{"location":"reference/packages/python/#stack-group-structure","text":"Create a stacks folder in the root of the project and structure it as follows: . +-- cdk.json +-- app.py +-- stacks/ | +-- <groupName>/ | +-- stacks.py The stack groups files follow this pattern:","title":"Stack Group Structure"},{"location":"reference/packages/python/#aws-cdk_1","text":"import aws_cdk as cdk from dataclasses import dataclass from cdk_organizer.aws.stack_group import StackGroup @dataclass class MyStackGroupConfig : domain : str ipv6 : bool = True class MyStackGroup ( StackGroup [ MyStackGroupConfig ]): def _load_stacks ( self ) -> None : MyStack ( self . app , self . get_stack_name ( 'my-stack' ), stack_group = self , parameters = MyStackParameters ( domain = self . data . domain , ipv6 = self . data . ipv6 ) )","title":"AWS CDK"},{"location":"reference/packages/python/#terraform","text":"import cdktf from dataclasses import dataclass from cdk_organizer.terraform.stack_group import StackGroup @dataclass class MyStackGroupConfig : domain : str ipv6 : bool = True class MyStackGroup ( StackGroup [ MyStackGroupConfig ]): def _load_stacks ( self ) -> None : MyStack ( self . app , self . get_stack_name ( 'my-stack' ), stack_group = self , parameters = MyStackParameters ( domain = self . data . domain , ipv6 = self . data . ipv6 ) )","title":"Terraform"},{"location":"reference/packages/python/#using-stack-attributes-from-other-stack-groups","text":"In some cases, you may want to use the attributes of another stack group. For example, refer the DNS Hosted Zone created by a shared stack group. To resolve the group use the self.resolve_group function in the stack group class, like the example below: import aws_cdk as cdk from dataclasses import dataclass from cdk_organizer.aws.stack_group import StackGroup from stacks.dns import DNSStackGroup @dataclass class MyStackGroupConfig : domain : str ipv6 : bool = True class MyStackGroup ( StackGroup [ MyStackGroupConfig ]): def _load_stacks ( self ) -> None : MyStack ( self . app , self . get_stack_name ( 'my-stack' ), stack_group = self , parameters = MyStackParameters ( domain = self . data . domain , zone = self . resolve_group ( DNSStackGroup ) . zone ipv6 = self . data . ipv6 ) ) The function get_stack_name generates the stack name based on following pattern. Pattern : {module_path}-{name}-{region}-{env} Consider the following example: module_path : myproject.myapp.www name : spa region : us-east-1 env : dev Stack name will be: myproject-myapp-www-spa-us-east-1-dev .","title":"Using Stack Attributes from Other Stack Groups"},{"location":"reference/packages/python/#config-structure","text":"Create a config folder in the root of the project and structure it as follows: . +-- cdk.json +-- app.py +-- config/ | +-- <env>/ | +-- config.yaml | +-- <region>/ | +-- config.yaml | +-- <groupName>/ | +-- config.yaml The first two levels are reserved to the environment name and the region name, the next levels needs to match the stack group structure. Example: . +-- cdk.json +-- app.py +-- config/ | +-- config.yaml | +-- dev/ | +-- config.yaml | +-- us-east-1/ | +-- config.yaml | +-- app1/ | +-- config.yaml +-- stacks/ | +-- app1/ | +-- stacks.py +-- templates/ | +-- stacks/","title":"Config Structure"},{"location":"reference/packages/python/#examples","text":"AWS CDK CDK for Terraform","title":"Examples"},{"location":"reference/packages/python/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.0.0] - 2022-08-29 Added Initial project version.","title":"Changelog"},{"location":"reference/packages/python/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"reference/packages/python/CHANGELOG/#100-2022-08-29","text":"","title":"[1.0.0] - 2022-08-29"},{"location":"reference/packages/python/CHANGELOG/#added","text":"Initial project version.","title":"Added"},{"location":"reference/packages/typescript/aws/","text":"CDK Organizer for AWS CDK TypeScript Library This library contains the core features to handle CDK projects including: Configuration Resolver Stack Groups Loader Naming Utils Installation npm install --save @awslv/aws-cdk-organizer Project Structure To apply the pattern purposed in this library for CDK projects, the following structure is required: . +-- cdk.json +-- bin/main.ts Stack Structure the stack class needs to inherit from class import { Stack } from '@awslv/aws-cdk-organizer' for AWS CDK. AWS CDK import { Stack } from '@awslv/aws-cdk-organizer' ; import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { StackProps } from 'aws-cdk-lib' ; import { Bucket } from 'aws-cdk-lib/aws-s3' ; import { Construct } from 'constructs' ; export type S3StackProps = StackProps & { bucketName : string ; }; export class S3Stack extends Stack < S3StackProps > { public bucket : Bucket ; constructor ( stackGroup : StackGroup , scope : Construct , id : string , props : S3StackProps ) { super ( stackGroup , scope , id , props ); this . bucket = new Bucket ( this , 'Bucket' , { bucketName : this.getBucketName ( props . bucketName ) }); } } Stack Group Structure Create a stacks folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- stacks/ | +-- <groupName>/ | +-- stacks.ts The stack groups files follow this pattern: AWS CDK import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { BaseConfig } from '@awslv/cdk-organizer-core' ; import { Bucket } from 'aws-cdk-lib/aws-s3' ; import { S3Stack } from '../../templates/s3-stack' ; type StorageStackGroupProps = { bucketName : string ; } & BaseConfig ; export class StorageStackGroup extends StackGroup < StorageStackGroupProps > { public bucket !: Bucket ; override async loadStacks () : Promise < void > { this . bucket = new S3Stack ( this , this . app , this . getStackName ( 'bucket' ), { bucketName : this.data.bucketName , }). bucket ; } } Using Stack Attributes from Other Stack Groups In some cases, you may want to use the attributes of another stack group. For example, refer the DNS Hosted Zone created by a shared stack group. To resolve the group use the this.resolveGroup function in the stack group class, like the example below: import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { RoleStack } from '../../templates/role-stack' ; import { StorageStackGroup } from '../storage/stacks' ; export class IamStackGroup extends StackGroup { override async loadStacks () : Promise < void > { const storageGroup = await this . resolveGroup ( StorageStackGroup ); new RoleStack ( this , this . app , this . getStackName ( 'role' ), { bucket : storageGroup.bucket , }); } } The function getStackName generates the stack name based on following pattern. Pattern : {module_path}-{name}-{region}-{env} Consider the following example: module_path : myproject.myapp.www name : spa region : us-east-1 env : dev Stack name will be: myproject-myapp-www-spa-us-east-1-dev . Config Structure Create a config folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- <env>/ | +-- config.yaml | +-- <region>/ | +-- config.yaml | +-- <groupName>/ | +-- config.yaml The first two levels are reserved to the environment name and the region name, the next levels needs to match the stack group structure. Example: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- config.yaml | +-- dev/ | +-- config.yaml | +-- us-east-1/ | +-- config.yaml | +-- app1/ | +-- config.yaml +-- stacks/ | +-- app1/ | +-- stacks.ts +-- templates/ | +-- stacks/ Examples AWS CDK","title":"Typescript AWS CDK"},{"location":"reference/packages/typescript/aws/#cdk-organizer-for-aws-cdk-typescript-library","text":"This library contains the core features to handle CDK projects including: Configuration Resolver Stack Groups Loader Naming Utils","title":"CDK Organizer for AWS CDK TypeScript Library"},{"location":"reference/packages/typescript/aws/#installation","text":"npm install --save @awslv/aws-cdk-organizer","title":"Installation"},{"location":"reference/packages/typescript/aws/#project-structure","text":"To apply the pattern purposed in this library for CDK projects, the following structure is required: . +-- cdk.json +-- bin/main.ts","title":"Project Structure"},{"location":"reference/packages/typescript/aws/#stack-structure","text":"the stack class needs to inherit from class import { Stack } from '@awslv/aws-cdk-organizer' for AWS CDK.","title":"Stack Structure"},{"location":"reference/packages/typescript/aws/#aws-cdk","text":"import { Stack } from '@awslv/aws-cdk-organizer' ; import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { StackProps } from 'aws-cdk-lib' ; import { Bucket } from 'aws-cdk-lib/aws-s3' ; import { Construct } from 'constructs' ; export type S3StackProps = StackProps & { bucketName : string ; }; export class S3Stack extends Stack < S3StackProps > { public bucket : Bucket ; constructor ( stackGroup : StackGroup , scope : Construct , id : string , props : S3StackProps ) { super ( stackGroup , scope , id , props ); this . bucket = new Bucket ( this , 'Bucket' , { bucketName : this.getBucketName ( props . bucketName ) }); } }","title":"AWS CDK"},{"location":"reference/packages/typescript/aws/#stack-group-structure","text":"Create a stacks folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- stacks/ | +-- <groupName>/ | +-- stacks.ts The stack groups files follow this pattern:","title":"Stack Group Structure"},{"location":"reference/packages/typescript/aws/#aws-cdk_1","text":"import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { BaseConfig } from '@awslv/cdk-organizer-core' ; import { Bucket } from 'aws-cdk-lib/aws-s3' ; import { S3Stack } from '../../templates/s3-stack' ; type StorageStackGroupProps = { bucketName : string ; } & BaseConfig ; export class StorageStackGroup extends StackGroup < StorageStackGroupProps > { public bucket !: Bucket ; override async loadStacks () : Promise < void > { this . bucket = new S3Stack ( this , this . app , this . getStackName ( 'bucket' ), { bucketName : this.data.bucketName , }). bucket ; } }","title":"AWS CDK"},{"location":"reference/packages/typescript/aws/#using-stack-attributes-from-other-stack-groups","text":"In some cases, you may want to use the attributes of another stack group. For example, refer the DNS Hosted Zone created by a shared stack group. To resolve the group use the this.resolveGroup function in the stack group class, like the example below: import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { RoleStack } from '../../templates/role-stack' ; import { StorageStackGroup } from '../storage/stacks' ; export class IamStackGroup extends StackGroup { override async loadStacks () : Promise < void > { const storageGroup = await this . resolveGroup ( StorageStackGroup ); new RoleStack ( this , this . app , this . getStackName ( 'role' ), { bucket : storageGroup.bucket , }); } } The function getStackName generates the stack name based on following pattern. Pattern : {module_path}-{name}-{region}-{env} Consider the following example: module_path : myproject.myapp.www name : spa region : us-east-1 env : dev Stack name will be: myproject-myapp-www-spa-us-east-1-dev .","title":"Using Stack Attributes from Other Stack Groups"},{"location":"reference/packages/typescript/aws/#config-structure","text":"Create a config folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- <env>/ | +-- config.yaml | +-- <region>/ | +-- config.yaml | +-- <groupName>/ | +-- config.yaml The first two levels are reserved to the environment name and the region name, the next levels needs to match the stack group structure. Example: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- config.yaml | +-- dev/ | +-- config.yaml | +-- us-east-1/ | +-- config.yaml | +-- app1/ | +-- config.yaml +-- stacks/ | +-- app1/ | +-- stacks.ts +-- templates/ | +-- stacks/","title":"Config Structure"},{"location":"reference/packages/typescript/aws/#examples","text":"AWS CDK","title":"Examples"},{"location":"reference/packages/typescript/aws/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.0.0] - 2022-08-29 Added Initial project version.","title":"Changelog"},{"location":"reference/packages/typescript/aws/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"reference/packages/typescript/aws/CHANGELOG/#100-2022-08-29","text":"","title":"[1.0.0] - 2022-08-29"},{"location":"reference/packages/typescript/aws/CHANGELOG/#added","text":"Initial project version.","title":"Added"},{"location":"reference/packages/typescript/core/","text":"CDK Organizer TypeScript Library This library contains the core features to handle CDK projects including: Configuration Resolver Stack Groups Loader Naming Utils Project Structure To apply the pattern purposed in this library for CDK projects, the following structure is required: . +-- cdk.json +-- bin/main.ts Stack Structure the stack class needs to inherit from class import { Stack } from '@awslv/aws-cdk-organizer' for AWS CDK and import { Stack } from '@awslv/cdkft-organizer' for Terraform CDK. AWS CDK import { Stack } from '@awslv/aws-cdk-organizer' ; import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { StackProps } from 'aws-cdk-lib' ; import { Bucket } from 'aws-cdk-lib/aws-s3' ; import { Construct } from 'constructs' ; export type S3StackProps = StackProps & { bucketName : string ; }; export class S3Stack extends Stack < S3StackProps > { public bucket : Bucket ; constructor ( stackGroup : StackGroup , scope : Construct , id : string , props : S3StackProps ) { super ( stackGroup , scope , id , props ); this . bucket = new Bucket ( this , 'Bucket' , { bucketName : this.getBucketName ( props . bucketName ) }); } } Terraform CDK import { Stack , StackGroup } from '@awslv/cdktf-organizer' ; import { AwsProvider } from '@cdktf/provider-aws' ; import { S3Bucket } from '@cdktf/provider-aws/lib/s3' ; import { Construct } from 'constructs' ; export type S3StackProps = { bucketName : string ; }; export class S3Stack extends Stack { public bucket : S3Bucket ; constructor ( stackGroup : StackGroup , scope : Construct , id : string , props : S3StackProps ) { super ( stackGroup , scope , id ); new AwsProvider ( this , 'Aws' , { region : this.config [ 'region' ] as string , }) this . bucket = new S3Bucket ( this , 'Bucket' , { bucket : this.getBucketName ( props . bucketName ) }); } } Using S3 Backend To use S3 terraform backend, the following resources are required: S3 Bucket DynamoDB Table Modify the cdktf.json to add the following object: { ... \"context\" : { ... \"s3Backend\" : { \"bucket\" : \"<bucket-name>\" , \"region\" : \"<aws-region>\" , \"dynamodbTable\" : \"<dynamodb-table-name>\" } ... } ... } Stack Group Structure Create a stacks folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- stacks/ | +-- <groupName>/ | +-- stacks.ts The stack groups files follow this pattern: AWS CDK import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { BaseConfig } from '@awslv/cdk-organizer-core' ; import { Bucket } from 'aws-cdk-lib/aws-s3' ; import { S3Stack } from '../../templates/s3-stack' ; type StorageStackGroupProps = { bucketName : string ; } & BaseConfig ; export class StorageStackGroup extends StackGroup < StorageStackGroupProps > { public bucket !: Bucket ; override async loadStacks () : Promise < void > { this . bucket = new S3Stack ( this , this . app , this . getStackName ( 'bucket' ), { bucketName : this.data.bucketName , }). bucket ; } } Terraform import { StackGroup } from '@awslv/cdktf-organizer' ; import { BaseConfig } from '@awslv/cdk-organizer-core' ; import { S3Bucket } from '@cdktf/provider-aws/lib/s3' ; import { S3Stack } from '../../templates/s3-stack' ; type StorageStackGroupProps = { bucketName : string ; } & BaseConfig ; export class StorageStackGroup extends StackGroup < StorageStackGroupProps > { public bucket !: S3Bucket ; override async loadStacks () : Promise < void > { this . bucket = new S3Stack ( this , this . app , this . getStackName ( 'bucket' ), { bucketName : this.data.bucketName , }). bucket ; } } Using Stack Attributes from Other Stack Groups In some cases, you may want to use the attributes of another stack group. For example, refer the DNS Hosted Zone created by a shared stack group. To resolve the group use the this.resolveGroup function in the stack group class, like the example below: import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { RoleStack } from '../../templates/role-stack' ; import { StorageStackGroup } from '../storage/stacks' ; export class IamStackGroup extends StackGroup { override async loadStacks () : Promise < void > { const storageGroup = await this . resolveGroup ( StorageStackGroup ); new RoleStack ( this , this . app , this . getStackName ( 'role' ), { bucket : storageGroup.bucket , }); } } The function getStackName generates the stack name based on following pattern. Pattern : {module_path}-{name}-{region}-{env} Consider the following example: module_path : myproject.myapp.www name : spa region : us-east-1 env : dev Stack name will be: myproject-myapp-www-spa-us-east-1-dev . Config Structure Create a config folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- <env>/ | +-- config.yaml | +-- <region>/ | +-- config.yaml | +-- <groupName>/ | +-- config.yaml The first two levels are reserved to the environment name and the region name, the next levels needs to match the stack group structure. Example: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- config.yaml | +-- dev/ | +-- config.yaml | +-- us-east-1/ | +-- config.yaml | +-- app1/ | +-- config.yaml +-- stacks/ | +-- app1/ | +-- stacks.ts +-- templates/ | +-- stacks/ Examples AWS CDK CDK for Terraform","title":"CDK Organizer TypeScript Library"},{"location":"reference/packages/typescript/core/#cdk-organizer-typescript-library","text":"This library contains the core features to handle CDK projects including: Configuration Resolver Stack Groups Loader Naming Utils","title":"CDK Organizer TypeScript Library"},{"location":"reference/packages/typescript/core/#project-structure","text":"To apply the pattern purposed in this library for CDK projects, the following structure is required: . +-- cdk.json +-- bin/main.ts","title":"Project Structure"},{"location":"reference/packages/typescript/core/#stack-structure","text":"the stack class needs to inherit from class import { Stack } from '@awslv/aws-cdk-organizer' for AWS CDK and import { Stack } from '@awslv/cdkft-organizer' for Terraform CDK.","title":"Stack Structure"},{"location":"reference/packages/typescript/core/#aws-cdk","text":"import { Stack } from '@awslv/aws-cdk-organizer' ; import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { StackProps } from 'aws-cdk-lib' ; import { Bucket } from 'aws-cdk-lib/aws-s3' ; import { Construct } from 'constructs' ; export type S3StackProps = StackProps & { bucketName : string ; }; export class S3Stack extends Stack < S3StackProps > { public bucket : Bucket ; constructor ( stackGroup : StackGroup , scope : Construct , id : string , props : S3StackProps ) { super ( stackGroup , scope , id , props ); this . bucket = new Bucket ( this , 'Bucket' , { bucketName : this.getBucketName ( props . bucketName ) }); } }","title":"AWS CDK"},{"location":"reference/packages/typescript/core/#terraform-cdk","text":"import { Stack , StackGroup } from '@awslv/cdktf-organizer' ; import { AwsProvider } from '@cdktf/provider-aws' ; import { S3Bucket } from '@cdktf/provider-aws/lib/s3' ; import { Construct } from 'constructs' ; export type S3StackProps = { bucketName : string ; }; export class S3Stack extends Stack { public bucket : S3Bucket ; constructor ( stackGroup : StackGroup , scope : Construct , id : string , props : S3StackProps ) { super ( stackGroup , scope , id ); new AwsProvider ( this , 'Aws' , { region : this.config [ 'region' ] as string , }) this . bucket = new S3Bucket ( this , 'Bucket' , { bucket : this.getBucketName ( props . bucketName ) }); } }","title":"Terraform CDK"},{"location":"reference/packages/typescript/core/#using-s3-backend","text":"To use S3 terraform backend, the following resources are required: S3 Bucket DynamoDB Table Modify the cdktf.json to add the following object: { ... \"context\" : { ... \"s3Backend\" : { \"bucket\" : \"<bucket-name>\" , \"region\" : \"<aws-region>\" , \"dynamodbTable\" : \"<dynamodb-table-name>\" } ... } ... }","title":"Using S3 Backend"},{"location":"reference/packages/typescript/core/#stack-group-structure","text":"Create a stacks folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- stacks/ | +-- <groupName>/ | +-- stacks.ts The stack groups files follow this pattern:","title":"Stack Group Structure"},{"location":"reference/packages/typescript/core/#aws-cdk_1","text":"import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { BaseConfig } from '@awslv/cdk-organizer-core' ; import { Bucket } from 'aws-cdk-lib/aws-s3' ; import { S3Stack } from '../../templates/s3-stack' ; type StorageStackGroupProps = { bucketName : string ; } & BaseConfig ; export class StorageStackGroup extends StackGroup < StorageStackGroupProps > { public bucket !: Bucket ; override async loadStacks () : Promise < void > { this . bucket = new S3Stack ( this , this . app , this . getStackName ( 'bucket' ), { bucketName : this.data.bucketName , }). bucket ; } }","title":"AWS CDK"},{"location":"reference/packages/typescript/core/#terraform","text":"import { StackGroup } from '@awslv/cdktf-organizer' ; import { BaseConfig } from '@awslv/cdk-organizer-core' ; import { S3Bucket } from '@cdktf/provider-aws/lib/s3' ; import { S3Stack } from '../../templates/s3-stack' ; type StorageStackGroupProps = { bucketName : string ; } & BaseConfig ; export class StorageStackGroup extends StackGroup < StorageStackGroupProps > { public bucket !: S3Bucket ; override async loadStacks () : Promise < void > { this . bucket = new S3Stack ( this , this . app , this . getStackName ( 'bucket' ), { bucketName : this.data.bucketName , }). bucket ; } }","title":"Terraform"},{"location":"reference/packages/typescript/core/#using-stack-attributes-from-other-stack-groups","text":"In some cases, you may want to use the attributes of another stack group. For example, refer the DNS Hosted Zone created by a shared stack group. To resolve the group use the this.resolveGroup function in the stack group class, like the example below: import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { RoleStack } from '../../templates/role-stack' ; import { StorageStackGroup } from '../storage/stacks' ; export class IamStackGroup extends StackGroup { override async loadStacks () : Promise < void > { const storageGroup = await this . resolveGroup ( StorageStackGroup ); new RoleStack ( this , this . app , this . getStackName ( 'role' ), { bucket : storageGroup.bucket , }); } } The function getStackName generates the stack name based on following pattern. Pattern : {module_path}-{name}-{region}-{env} Consider the following example: module_path : myproject.myapp.www name : spa region : us-east-1 env : dev Stack name will be: myproject-myapp-www-spa-us-east-1-dev .","title":"Using Stack Attributes from Other Stack Groups"},{"location":"reference/packages/typescript/core/#config-structure","text":"Create a config folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- <env>/ | +-- config.yaml | +-- <region>/ | +-- config.yaml | +-- <groupName>/ | +-- config.yaml The first two levels are reserved to the environment name and the region name, the next levels needs to match the stack group structure. Example: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- config.yaml | +-- dev/ | +-- config.yaml | +-- us-east-1/ | +-- config.yaml | +-- app1/ | +-- config.yaml +-- stacks/ | +-- app1/ | +-- stacks.ts +-- templates/ | +-- stacks/","title":"Config Structure"},{"location":"reference/packages/typescript/core/#examples","text":"AWS CDK CDK for Terraform","title":"Examples"},{"location":"reference/packages/typescript/core/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.0.0] - 2022-08-29 Added Initial project version.","title":"Changelog"},{"location":"reference/packages/typescript/core/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"reference/packages/typescript/core/CHANGELOG/#100-2022-08-29","text":"","title":"[1.0.0] - 2022-08-29"},{"location":"reference/packages/typescript/core/CHANGELOG/#added","text":"Initial project version.","title":"Added"},{"location":"reference/packages/typescript/terraform/","text":"CDK Organizer for CDK Terraform TypeScript Library This library contains the core features to handle CDK projects including: Configuration Resolver Stack Groups Loader Naming Utils Installation npm install --save @awslv/aws-cdk-organizer Project Structure To apply the pattern purposed in this library for CDK projects, the following structure is required: . +-- cdk.json +-- bin/main.ts Stack Structure the stack class needs to inherit from class import { Stack } from '@awslv/cdkft-organizer' for Terraform CDK. Terraform CDK import { Stack , StackGroup } from '@awslv/cdktf-organizer' ; import { AwsProvider } from '@cdktf/provider-aws' ; import { S3Bucket } from '@cdktf/provider-aws/lib/s3' ; import { Construct } from 'constructs' ; export type S3StackProps = { bucketName : string ; }; export class S3Stack extends Stack { public bucket : S3Bucket ; constructor ( stackGroup : StackGroup , scope : Construct , id : string , props : S3StackProps ) { super ( stackGroup , scope , id ); new AwsProvider ( this , 'Aws' , { region : this.config [ 'region' ] as string , }) this . bucket = new S3Bucket ( this , 'Bucket' , { bucket : this.getBucketName ( props . bucketName ) }); } } Using S3 Backend To use S3 terraform backend, the following resources are required: S3 Bucket DynamoDB Table Modify the cdktf.json to add the following object: { ... \"context\" : { ... \"s3Backend\" : { \"bucket\" : \"<bucket-name>\" , \"region\" : \"<aws-region>\" , \"dynamodbTable\" : \"<dynamodb-table-name>\" } ... } ... } Stack Group Structure Create a stacks folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- stacks/ | +-- <groupName>/ | +-- stacks.ts The stack groups files follow this pattern: Terraform import { StackGroup } from '@awslv/cdktf-organizer' ; import { BaseConfig } from '@awslv/cdk-organizer-core' ; import { S3Bucket } from '@cdktf/provider-aws/lib/s3' ; import { S3Stack } from '../../templates/s3-stack' ; type StorageStackGroupProps = { bucketName : string ; } & BaseConfig ; export class StorageStackGroup extends StackGroup < StorageStackGroupProps > { public bucket !: S3Bucket ; override async loadStacks () : Promise < void > { this . bucket = new S3Stack ( this , this . app , this . getStackName ( 'bucket' ), { bucketName : this.data.bucketName , }). bucket ; } } Using Stack Attributes from Other Stack Groups In some cases, you may want to use the attributes of another stack group. For example, refer the DNS Hosted Zone created by a shared stack group. To resolve the group use the this.resolveGroup function in the stack group class, like the example below: import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { RoleStack } from '../../templates/role-stack' ; import { StorageStackGroup } from '../storage/stacks' ; export class IamStackGroup extends StackGroup { override async loadStacks () : Promise < void > { const storageGroup = await this . resolveGroup ( StorageStackGroup ); new RoleStack ( this , this . app , this . getStackName ( 'role' ), { bucket : storageGroup.bucket , }); } } The function getStackName generates the stack name based on following pattern. Pattern : {module_path}-{name}-{region}-{env} Consider the following example: module_path : myproject.myapp.www name : spa region : us-east-1 env : dev Stack name will be: myproject-myapp-www-spa-us-east-1-dev . Config Structure Create a config folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- <env>/ | +-- config.yaml | +-- <region>/ | +-- config.yaml | +-- <groupName>/ | +-- config.yaml The first two levels are reserved to the environment name and the region name, the next levels needs to match the stack group structure. Example: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- config.yaml | +-- dev/ | +-- config.yaml | +-- us-east-1/ | +-- config.yaml | +-- app1/ | +-- config.yaml +-- stacks/ | +-- app1/ | +-- stacks.ts +-- templates/ | +-- stacks/ Examples CDK for Terraform","title":"Typescript CDK for Terraform"},{"location":"reference/packages/typescript/terraform/#cdk-organizer-for-cdk-terraform-typescript-library","text":"This library contains the core features to handle CDK projects including: Configuration Resolver Stack Groups Loader Naming Utils","title":"CDK Organizer for CDK Terraform TypeScript Library"},{"location":"reference/packages/typescript/terraform/#installation","text":"npm install --save @awslv/aws-cdk-organizer","title":"Installation"},{"location":"reference/packages/typescript/terraform/#project-structure","text":"To apply the pattern purposed in this library for CDK projects, the following structure is required: . +-- cdk.json +-- bin/main.ts","title":"Project Structure"},{"location":"reference/packages/typescript/terraform/#stack-structure","text":"the stack class needs to inherit from class import { Stack } from '@awslv/cdkft-organizer' for Terraform CDK.","title":"Stack Structure"},{"location":"reference/packages/typescript/terraform/#terraform-cdk","text":"import { Stack , StackGroup } from '@awslv/cdktf-organizer' ; import { AwsProvider } from '@cdktf/provider-aws' ; import { S3Bucket } from '@cdktf/provider-aws/lib/s3' ; import { Construct } from 'constructs' ; export type S3StackProps = { bucketName : string ; }; export class S3Stack extends Stack { public bucket : S3Bucket ; constructor ( stackGroup : StackGroup , scope : Construct , id : string , props : S3StackProps ) { super ( stackGroup , scope , id ); new AwsProvider ( this , 'Aws' , { region : this.config [ 'region' ] as string , }) this . bucket = new S3Bucket ( this , 'Bucket' , { bucket : this.getBucketName ( props . bucketName ) }); } }","title":"Terraform CDK"},{"location":"reference/packages/typescript/terraform/#using-s3-backend","text":"To use S3 terraform backend, the following resources are required: S3 Bucket DynamoDB Table Modify the cdktf.json to add the following object: { ... \"context\" : { ... \"s3Backend\" : { \"bucket\" : \"<bucket-name>\" , \"region\" : \"<aws-region>\" , \"dynamodbTable\" : \"<dynamodb-table-name>\" } ... } ... }","title":"Using S3 Backend"},{"location":"reference/packages/typescript/terraform/#stack-group-structure","text":"Create a stacks folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- stacks/ | +-- <groupName>/ | +-- stacks.ts The stack groups files follow this pattern:","title":"Stack Group Structure"},{"location":"reference/packages/typescript/terraform/#terraform","text":"import { StackGroup } from '@awslv/cdktf-organizer' ; import { BaseConfig } from '@awslv/cdk-organizer-core' ; import { S3Bucket } from '@cdktf/provider-aws/lib/s3' ; import { S3Stack } from '../../templates/s3-stack' ; type StorageStackGroupProps = { bucketName : string ; } & BaseConfig ; export class StorageStackGroup extends StackGroup < StorageStackGroupProps > { public bucket !: S3Bucket ; override async loadStacks () : Promise < void > { this . bucket = new S3Stack ( this , this . app , this . getStackName ( 'bucket' ), { bucketName : this.data.bucketName , }). bucket ; } }","title":"Terraform"},{"location":"reference/packages/typescript/terraform/#using-stack-attributes-from-other-stack-groups","text":"In some cases, you may want to use the attributes of another stack group. For example, refer the DNS Hosted Zone created by a shared stack group. To resolve the group use the this.resolveGroup function in the stack group class, like the example below: import { StackGroup } from '@awslv/aws-cdk-organizer' ; import { RoleStack } from '../../templates/role-stack' ; import { StorageStackGroup } from '../storage/stacks' ; export class IamStackGroup extends StackGroup { override async loadStacks () : Promise < void > { const storageGroup = await this . resolveGroup ( StorageStackGroup ); new RoleStack ( this , this . app , this . getStackName ( 'role' ), { bucket : storageGroup.bucket , }); } } The function getStackName generates the stack name based on following pattern. Pattern : {module_path}-{name}-{region}-{env} Consider the following example: module_path : myproject.myapp.www name : spa region : us-east-1 env : dev Stack name will be: myproject-myapp-www-spa-us-east-1-dev .","title":"Using Stack Attributes from Other Stack Groups"},{"location":"reference/packages/typescript/terraform/#config-structure","text":"Create a config folder in the root of the project and structure it as follows: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- <env>/ | +-- config.yaml | +-- <region>/ | +-- config.yaml | +-- <groupName>/ | +-- config.yaml The first two levels are reserved to the environment name and the region name, the next levels needs to match the stack group structure. Example: . +-- cdk.json +-- bin/main.ts +-- config/ | +-- config.yaml | +-- dev/ | +-- config.yaml | +-- us-east-1/ | +-- config.yaml | +-- app1/ | +-- config.yaml +-- stacks/ | +-- app1/ | +-- stacks.ts +-- templates/ | +-- stacks/","title":"Config Structure"},{"location":"reference/packages/typescript/terraform/#examples","text":"CDK for Terraform","title":"Examples"},{"location":"reference/packages/typescript/terraform/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.0.0] - 2022-08-29 Added Initial project version.","title":"Changelog"},{"location":"reference/packages/typescript/terraform/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"reference/packages/typescript/terraform/CHANGELOG/#100-2022-08-29","text":"","title":"[1.0.0] - 2022-08-29"},{"location":"reference/packages/typescript/terraform/CHANGELOG/#added","text":"Initial project version.","title":"Added"}]}